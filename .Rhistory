# ssgsea + hierarchical clustering + visualization -------------------------------------------------
rm(list = ls())
library(GSVA)
library(estimate)
library(pheatmap)
# Read in immune gene sets
genesets = read.csv("./toy data/mmc3.csv", stringsAsFactors = FALSE,header = FALSE)
# Read in immune gene sets
genesets = read.csv("./toy data/mmc3.csv", stringsAsFactors = FALSE,header = FALSE)
# Read in immune gene sets
genesets = read.csv("./toy data/immune signatures.csv", stringsAsFactors = FALSE,header = FALSE)
genesets = as.data.frame(t(genesets))
results=c()
for(i in 1:dim(genesets)[1]){
if (genesets[i,dim(genesets)[2]]=="") {geneset=list(as.character(genesets[i,2:length(genesets[i,])])[-which(genesets[i,2:length(genesets[i,])]=="")])}
else geneset=list(as.character(genesets[i,2:length(genesets[i,2:length(genesets[i,])])]))
names(geneset)=genesets[i,1]
results=c(results,geneset)
}
geneSet = results
View(geneSet)
dim(genesets)[2]
# Read in immune gene sets
genesets = read.csv("./toy data/immune signatures.csv", stringsAsFactors = FALSE,header = FALSE)
genesets = as.data.frame(t(genesets))
which(genesets[1,2:length(genesets[1,])]=="")])
which(genesets[1,2:length(genesets[1,])]=="")
genesets[i,dim(genesets)[2]]
genesets[1,dim(genesets)[2]]
class(genesets[1,2])
class(genesets[2,2])
dim(genesets)[2]
length(genesets[2,])
length(genesets[4,])
length(genesets[3,2:length(genesets[3,])])
genesets[i,2:length(genesets[i,])]
genesets[3,2:length(genesets[3,])]
genesets[3,2:length(genesets[3,])])
genesets[3,2:length(genesets[3,])]
genesets[3,2:length(genesets[3,2:length(genesets[3,])])]
genesets[5,2:length(genesets[5,2:length(genesets[5,])])]
genesets[5,2:length(genesets[5,])]
names(genesets)
names(genesets)[1]
results=c()
for(i in 1:dim(genesets)[1]){
if(genesets[i,dim(genesets)[2] == ""]){geneset = list(as.character(genesets[i,2:length(genesets[i,])])[-which(genesets[i,2:length(genesets[i,])] == "")])}
else geneset = list(as.character(genesets[i,2:length(genesets[i,])]))
names(geneset) = genesets[i,1]
results = c(results,geneset)
}
results=c()
for(i in 1:dim(genesets)[1]){
if (genesets[i,dim(genesets)[2]]=="") {geneset=list(as.character(genesets[i,2:length(genesets[i,])])[-which(genesets[i,2:length(genesets[i,])]=="")])}
else geneset=list(as.character(genesets[i,2:length(genesets[i,2:length(genesets[i,])])]))
names(geneset)=genesets[i,1]
results=c(results,geneset)
}
for(i in 1:dim(genesets)[1]){
if(genesets[i,dim(genesets)[2] == ""]){geneset = list(as.character(genesets[i,2:length(genesets[i,])])[-which(genesets[i,2:length(genesets[i,])] == "")])}
else geneset = list(as.character(genesets[i,2:length(genesets[i,])]))
names(geneset) = genesets[i,1]
results = c(results,geneset)
}
for(i in 1:dim(genesets)[1]){
if(genesets[i,dim(genesets)[2] == ""]){geneset = list(as.character(genesets[i,2:length(genesets[i,])])[-which(genesets[i,2:length(genesets[i,])] == "")])}
else geneset = list(as.character(genesets[i,2:length(genesets[i,2:length(genesets[i,])])]))
names(geneset) = genesets[i,1]
results = c(results,geneset)
}
results=c()
for(i in 1:dim(genesets)[1]){
if(genesets[i,dim(genesets)[2] == ""]){geneset = list(as.character(genesets[i,2:length(genesets[i,])])[-which(genesets[i,2:length(genesets[i,])] == "")])}
else geneset = list(as.character(genesets[i,2:length(genesets[i,2:length(genesets[i,])])]))
names(geneset) = genesets[i,1]
results = c(results,geneset)
}
for(i in 1:dim(genesets)[1]){
if(genesets[i,dim(genesets)[2]] == ""){geneset = list(as.character(genesets[i,2:length(genesets[i,])])[-which(genesets[i,2:length(genesets[i,])] == "")])}
else geneset = list(as.character(genesets[i,2:length(genesets[i,])]))
names(geneset) = genesets[i,1]
results = c(results,geneset)
}
# Read in immune gene sets
genesets = read.csv("./toy data/immune signatures.csv", stringsAsFactors = FALSE,header = FALSE)
genesets = as.data.frame(t(genesets))
geneSet=c()
# Remove the blank spaces from each row and turn the dataframe into a list
for(i in 1:dim(genesets)[1]){
if(genesets[i,dim(genesets)[2]] == ""){geneset = list(as.character(genesets[i,2:length(genesets[i,])])[-which(genesets[i,2:length(genesets[i,])] == "")])}
else geneset = list(as.character(genesets[i,2:length(genesets[i,])]))
names(geneset) = genesets[i,1]
geneSet = c(geneSet,geneset)
}
# Quantification of the activity of the immune gene set for patients in each data set using the ssgsea algorithm
project = c("TCGA","METABRIC","GSE24450","GSE11121","GSE2034")
# Quantification of the activity of the immune gene set for patients in each data set using the ssgsea algorithm
project = c("TCGA","METABRIC","GSE24450","GSE11121","GSE2034")
for(i in 1:5){
rna_seq = read.csv(paste0("./toy data/",project[i],"_expr.csv"),stringsAsFactors = F,header = T,check.names = F,row.names = 1)
rna_seq = as.matrix(rna_seq)
res = gsva(rna_seq,geneSet,method="ssgsea",ssgsea.norm = TRUE,verbose = TRUE)
colnames(res) = gsub(colnames(res),pattern=".",replacement="-",fixed = TRUE)
res = as.data.frame(res)
write.csv(res, paste0(project[i],"_ssgsea.csv"))
}
rna_seq = read.csv(paste0("./toy data/",project[3],"_expr.csv"),stringsAsFactors = F,header = T,check.names = F,row.names = 1)
rna_seq = read.csv(paste0("./toy data/",project[4],"_expr.csv"),stringsAsFactors = F,header = T,check.names = F,row.names = 1)
rna_seq = read.csv(paste0("./toy data/",project[5],"_expr.csv"),stringsAsFactors = F,header = T,check.names = F,row.names = 1)
rna_seq = read.csv(paste0("./toy data/",project[3],"_expr.csv"),stringsAsFactors = F,header = T,check.names = F)
View(rna_seq)
rna_seq = rna_seq[!duplicated(rna_seq[,1]),]
project[3]
write.csv(rna_seq,file = "./toy data/GSE24450_expr.csv")
write.csv(rna_seq,file = "./toy data/GSE24450_expr.csv",row.names = FALSE)
rna_seq = read.csv(paste0("./toy data/",project[4],"_expr.csv"),stringsAsFactors = F,header = T,check.names = F)
rna_seq = rna_seq[!duplicated(rna_seq[,1]),]
write.csv(rna_seq,file = "./toy data/GSE11121_expr.csv",row.names = FALSE)
rna_seq = read.csv(paste0("./toy data/",project[5],"_expr.csv"),stringsAsFactors = F,header = T,check.names = F)
rna_seq = rna_seq[!duplicated(rna_seq[,1]),]
write.csv(rna_seq,file = "./toy data/GSE2034_expr.csv",row.names = FALSE)
length(project)
# Quantification of the activity of the immune gene set for patients in each data set using the ssgsea algorithm
project = c("TCGA","METABRIC","GSE24450","GSE11121","GSE2034")
for(i in 1:length(project)){
rna_seq = read.csv(paste0("./toy data/",project[i],"_expr.csv"),stringsAsFactors = F,header = T,check.names = F,row.names = 1)
rna_seq = as.matrix(rna_seq)
res = gsva(rna_seq,geneSet,method="ssgsea",ssgsea.norm = TRUE,verbose = TRUE)
colnames(res) = gsub(colnames(res),pattern=".",replacement="-",fixed = TRUE)
res = as.data.frame(res)
write.csv(res, paste0(project[i],"_ssgsea.csv"))
}
ssgsea = read.csv(paste0(project[1],"_ssgsea.csv"),header=F,encoding="UTF-8")
View(ssgsea)
rownames(ssgsea) = as.character(ssgsea[,1])
ssgsea = ssgsea[,-1]
colnames(ssgsea) = t(ssgsea[1,])
ssgsea = ssgsea[-1,]
ssgsea = as.matrix(ssgsea)
# Converting expression values to numeric
ssgsea = matrix(as.numeric(ssgsea),nrow=nrow(ssgsea),ncol=ncol(ssgsea),dimnames=list(rownames(ssgsea),colnames(ssgsea)))
View(ssgsea)
ssgsea = read.csv(paste0(project[1],"_ssgsea.csv"),header=F,encoding="UTF-8")
View(ssgsea)
as.character(ssgsea[,1])
View(ssgsea)
ssgsea = read.csv(paste0(project[1],"_ssgsea.csv"),header=F,encoding="UTF-8")
View(ssgsea)
ssgsea = read.csv(paste0(project[2],"_ssgsea.csv"),header=F,encoding="UTF-8")
View(ssgsea)
ssgsea = read.csv(paste0(project[1],"_ssgsea.csv"),header=F,encoding="UTF-8")
rownames(ssgsea) = as.character(ssgsea[,1])
ssgsea = ssgsea[,-1]
colnames(ssgsea) = t(ssgsea[1,])
ssgsea = ssgsea[-1,]
ssgsea = as.matrix(ssgsea)
View(ssgsea)
rownames(ssgsea)
for(i in 1:length(project)){
ssgsea = read.csv(paste0(project[i],"_ssgsea.csv"),header=F,encoding="UTF-8")
rownames(ssgsea) = as.character(ssgsea[,1])
ssgsea = ssgsea[,-1]
colnames(ssgsea) = t(ssgsea[1,])
ssgsea = ssgsea[-1,]
ssgsea = as.matrix(ssgsea)
# Converting expression values to numeric
ssgsea = matrix(as.numeric(ssgsea),nrow=nrow(ssgsea),ncol=ncol(ssgsea),dimnames=list(rownames(ssgsea),colnames(ssgsea)))
# Normalisation
df=scale(t(ssgsea))
d=dist(df,method = "euclidean")   # dist() - Calculate the Euclidean distance between samples
sample.hc = hclust(d,method="ward.D2")
sample.id <- cutree(sample.hc,3)   #k=3
write.csv(sample.id,paste0(project[i],"_cluster.csv"))
b = read.csv(paste0(project[i],"_cluster.csv"),stringsAsFactor=FALSE)
b[,2] = paste("cluster",b[,2],sep = "")
anno_col = data.frame(cluster=factor(b[,2]))
rownames(anno_col)=as.character(b[,1])
ann_colors = list(cluster = c(cluster1 = "#80B1D3", cluster2="#FDB462",cluster3="#FB8072"))
pdf(paste0(project[i],"_heatmap"),width=8,height=15)
heatmap = pheatmap(ssgsea,scale = 'row',cellheight = 12,show_colnames = FALSE,color=colorRampPalette(c("blue2", "white", "red"))(20),legend=F,
clustering_distance_cols = "euclidean",cluster_rows=FALSE,annotation_col=anno_col, annotation_colors = ann_colors,
clustering_method = "ward.D2",cutree_cols=3)
dev.off()
}
for(i in 1:length(project)){
ssgsea = read.csv(paste0(project[i],"_ssgsea.csv"),header=F,encoding="UTF-8")
rownames(ssgsea) = as.character(ssgsea[,1])
ssgsea = ssgsea[,-1]
colnames(ssgsea) = t(ssgsea[1,])
ssgsea = ssgsea[-1,]
ssgsea = as.matrix(ssgsea)
# Converting expression values to numeric
ssgsea = matrix(as.numeric(ssgsea),nrow=nrow(ssgsea),ncol=ncol(ssgsea),dimnames=list(rownames(ssgsea),colnames(ssgsea)))
# Normalisation
df=scale(t(ssgsea))
d=dist(df,method = "euclidean")   # dist() - Calculate the Euclidean distance between samples
sample.hc = hclust(d,method="ward.D2")
sample.id <- cutree(sample.hc,3)   #k=3
write.csv(sample.id,paste0(project[i],"_cluster.csv"))
b = read.csv(paste0(project[i],"_cluster.csv"),stringsAsFactor=FALSE)
b[,2] = paste("cluster",b[,2],sep = "")
anno_col = data.frame(cluster=factor(b[,2]))
rownames(anno_col)=as.character(b[,1])
ann_colors = list(cluster = c(cluster1 = "#80B1D3", cluster2="#FDB462",cluster3="#FB8072"))
pdf(paste0(project[i],"_heatmap.pdf"),width=8,height=15)
heatmap = pheatmap(ssgsea,scale = 'row',cellheight = 12,show_colnames = FALSE,color=colorRampPalette(c("blue2", "white", "red"))(20),legend=F,
clustering_distance_cols = "euclidean",cluster_rows=FALSE,annotation_col=anno_col, annotation_colors = ann_colors,
clustering_method = "ward.D2",cutree_cols=3)
dev.off()
}
rm(list=ls())
project = c("METABRIC","TCGA","GSE24450","GSE2034","GSE11121")
result = c()
for(i in 1:length(project)){
ki = read.table(paste0("./toy data/",project[i],"_scores.txt"),sep = "\t")
rownames(ki) = gsub(rownames(ki),pattern = ".",replacement = "-",fixed = TRUE)
cluster = read.csv(paste0(project[i],"_cluster.csv"))
cluster[,1] = gsub(cluster[,1],pattern = ".",replacement = "-",fixed = TRUE)
cordata = merge(cluster,ki,by.x="X",by.y="row.names")
pv = c()
for(f in 3:dim(cordata)[2]){
pos1 = which(cordata[,2] == "Imm_H")
pos2 = which(cordata[,2] == "Imm_M")
pos3 = which(cordata[,2] == "Imm_L")
#wilcox
pvG = wilcox.test(as.numeric(cordata[,f])[pos1],as.numeric(cordata[,f])[pos2],alternative = "greater")$p.value
pvL = wilcox.test(as.numeric(cordata[,f])[pos1],as.numeric(cordata[,f])[pos2],alternative = "less")$p.value
pv2 = cbind(project[i],colnames(cordata)[f],pvG,pvL)
pv = rbind(pv,pv2)
rownames(pv) = NULL
}
ord = order(as.numeric(pv[,4]),decreasing=FALSE)
pvalue1 = pv[ord,]
fdr = rep(1,dim(pvalue1)[1]); for(n in 1:dim(pvalue1)[1]) fdr[n]<-as.numeric(pvalue1[n,4])*dim(pvalue1)[1]/n
pv2 = cbind(pvalue1,fdr)
colnames(pv2) = c("project","ESTIMATE","pvG","pvL","fdr")
result=rbind(result,pv2)
}
View(ki)
View(cluster)
View(cordata)
View(cluster)
pos1 = which(cordata[,2] == 1)
pos2 = which(cordata[,2] == 2)
pos3 = which(cordata[,2] == 3)
result = c()
for(i in 1:length(project)){
ki = read.table(paste0("./toy data/",project[i],"_scores.txt"),sep = "\t")
rownames(ki) = gsub(rownames(ki),pattern = ".",replacement = "-",fixed = TRUE)
cluster = read.csv(paste0(project[i],"_cluster.csv"))
cluster[,1] = gsub(cluster[,1],pattern = ".",replacement = "-",fixed = TRUE)
cordata = merge(cluster,ki,by.x="X",by.y="row.names")
pv = c()
for(f in 3:dim(cordata)[2]){
pos1 = which(cordata[,2] == 1)
pos2 = which(cordata[,2] == 2)
pos3 = which(cordata[,2] == 3)
#wilcox
pvG = wilcox.test(as.numeric(cordata[,f])[pos1],as.numeric(cordata[,f])[pos2],alternative = "greater")$p.value
pvL = wilcox.test(as.numeric(cordata[,f])[pos1],as.numeric(cordata[,f])[pos2],alternative = "less")$p.value
pv2 = cbind(project[i],colnames(cordata)[f],pvG,pvL)
pv = rbind(pv,pv2)
rownames(pv) = NULL
}
ord = order(as.numeric(pv[,4]),decreasing=FALSE)
pvalue1 = pv[ord,]
fdr = rep(1,dim(pvalue1)[1]); for(n in 1:dim(pvalue1)[1]) fdr[n]<-as.numeric(pvalue1[n,4])*dim(pvalue1)[1]/n
pv2 = cbind(pvalue1,fdr)
colnames(pv2) = c("project","ESTIMATE","pvG","pvL","fdr")
result=rbind(result,pv2)
}
result = as.data.frame(result)
View(result)
rm(list=ls())
project = c("METABRIC","TCGA","GSE24450","GSE2034","GSE11121")
result = c()
for(i in 1:length(project)){
ki = read.table("./toy data/",paste0(project[i],"_scores.txt"),sep = "\t")
rownames(ki) = gsub(rownames(ki),pattern = ".",replacement = "-",fixed = TRUE)
cluster = read.csv(paste0(project[i],"_cluster.csv"))
cluster[,1] = gsub(cluster[,1],pattern = ".",replacement = "-",fixed = TRUE)
cordata = merge(cluster,ki,by.x="X",by.y="row.names")
pv = c()
for(f in 3:dim(cordata)[2]){
pos1 = which(cordata[,2] == 1)
pos2 = which(cordata[,2] == 2)
pos3 = which(cordata[,2] == 3)
#wilcox
pvG = wilcox.test(as.numeric(cordata[,f])[pos1],as.numeric(cordata[,f])[pos3],alternative = "greater")$p.value
pvL = wilcox.test(as.numeric(cordata[,f])[pos1],as.numeric(cordata[,f])[pos3],alternative = "less")$p.value
pv2 = cbind(project[i],colnames(cordata)[f],pvG,pvL)
pv = rbind(pv,pv2)
rownames(pv) = NULL
}
ord = order(as.numeric(pv[,4]),decreasing=FALSE)
pvalue1 = pv[ord,]
fdr = rep(1,dim(pvalue1)[1]); for(n in 1:dim(pvalue1)[1]) fdr[n]<-as.numeric(pvalue1[n,4])*dim(pvalue1)[1]/n
pv2 = cbind(pvalue1,fdr)
colnames(pv2) = c("project","ESTIMATE","pvG","pvL","fdr")
result=rbind(result,pv2)
}
rm(list=ls())
project = c("METABRIC","TCGA","GSE24450","GSE2034","GSE11121")
result = c()
for(i in 1:length(project)){
ki = read.table(paste0("./toy data/",project[i],"_scores.txt"),sep = "\t")
rownames(ki) = gsub(rownames(ki),pattern = ".",replacement = "-",fixed = TRUE)
cluster = read.csv(paste0(project[i],"_cluster.csv"))
cluster[,1] = gsub(cluster[,1],pattern = ".",replacement = "-",fixed = TRUE)
cordata = merge(cluster,ki,by.x="X",by.y="row.names")
pv = c()
for(f in 3:dim(cordata)[2]){
pos1 = which(cordata[,2] == 1)
pos2 = which(cordata[,2] == 2)
pos3 = which(cordata[,2] == 3)
#wilcox
pvG = wilcox.test(as.numeric(cordata[,f])[pos1],as.numeric(cordata[,f])[pos3],alternative = "greater")$p.value
pvL = wilcox.test(as.numeric(cordata[,f])[pos1],as.numeric(cordata[,f])[pos3],alternative = "less")$p.value
pv2 = cbind(project[i],colnames(cordata)[f],pvG,pvL)
pv = rbind(pv,pv2)
rownames(pv) = NULL
}
ord = order(as.numeric(pv[,4]),decreasing=FALSE)
pvalue1 = pv[ord,]
fdr = rep(1,dim(pvalue1)[1]); for(n in 1:dim(pvalue1)[1]) fdr[n]<-as.numeric(pvalue1[n,4])*dim(pvalue1)[1]/n
pv2 = cbind(pvalue1,fdr)
colnames(pv2) = c("project","ESTIMATE","pvG","pvL","fdr")
result=rbind(result,pv2)
}
result = as.data.frame(result)
View(cordata)
rm(list=ls())
project = c("METABRIC","TCGA","GSE24450","GSE2034","GSE11121")
result = c()
for(i in 1:length(project)){
ki = read.table(paste0("./toy data/",project[i],"_scores.txt"),sep = "\t")
rownames(ki) = gsub(rownames(ki),pattern = ".",replacement = "-",fixed = TRUE)
cluster = read.csv(paste0(project[i],"_cluster.csv"))
cluster[,1] = gsub(cluster[,1],pattern = ".",replacement = "-",fixed = TRUE)
cordata = merge(cluster,ki,by.x="X",by.y="row.names")
pv = c()
for(f in 3:dim(cordata)[2]){
pos1 = which(cordata[,2] == 1)
pos2 = which(cordata[,2] == 2)
pos3 = which(cordata[,2] == 3)
#wilcox
pvG = wilcox.test(as.numeric(cordata[,f])[pos2],as.numeric(cordata[,f])[pos3],alternative = "greater")$p.value
pvL = wilcox.test(as.numeric(cordata[,f])[pos2],as.numeric(cordata[,f])[pos3],alternative = "less")$p.value
pv2 = cbind(project[i],colnames(cordata)[f],pvG,pvL)
pv = rbind(pv,pv2)
rownames(pv) = NULL
}
ord = order(as.numeric(pv[,4]),decreasing=FALSE)
pvalue1 = pv[ord,]
fdr = rep(1,dim(pvalue1)[1]); for(n in 1:dim(pvalue1)[1]) fdr[n]<-as.numeric(pvalue1[n,4])*dim(pvalue1)[1]/n
pv2 = cbind(pvalue1,fdr)
colnames(pv2) = c("project","ESTIMATE","pvG","pvL","fdr")
result=rbind(result,pv2)
}
